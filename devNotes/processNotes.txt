Process Notes for React Context Study
============================================




About Process Notes
===================
"Process Notes" is a step-by-step workflow document that outlines the "phases" of my study/app development and the successive steps taken at each
milestone of the examination. In the case of studies, the process notes might be eschewed in favor of the main Readme document in the repository, 
mostly because of the advantage in formatting and accessibility. However, I will put additional notes and resource links that might be helpful. In 
the case of application development, groups of related steps are combined into "phase" modules so that they can be reorganized and refined in 
post-review. This has proven to be EXTREMELY helpful in learning (i.e. Feynman technique (https://fs.blog/2012/04/feynman-technique/)) and refining 
workflow so I can improve my process in future projects. It also has come in handy for some tricky bug fixes not only for past projects, but this 
one as well so I would urge you to consider at least doing a rough summary for your own benefit.



Objective of Study
==================





# What is prop-drilling?
========================
  
  BUCKET BRIGADE EXAMPLE
  -==-=-=-=-=-=-=-=-=-=-=-
  * Think of prop-drilling like a bucket brigade, where each firefighter passes water from the hydrant to the fire, where 
    the props are the buckets and the components are the people.
  * So suppose you have a parent component at the root and a component tree. That parent component at the root makes an application
    request and stores it in state. That parent then renders components that render components. This large tree of components all have
    an API response in state in the root component.
  * The inefficient way to get the API request from the root component to the later-later-later-later component would be to: First
    pass the API results (the bucket) from the state to the first (A) direct child component as props. Then, you would need to pass the
    props to B, then to C, then to D, etc.

    [Parent Component] -->  [Child Component A] --> [Child Component B] --> [Child Component C] --> [Child Component D]

  * This passing of the props from the parent to the child at the end (D) is called prop drilling.


   social media icon EXAMPLE
   -=-=-=-=-=-=-=-=-=-=-=-=-
   * In this example, picture a social media website with an icon in the top right corner that says how many unread messages you have and 
     messages widget to read the messages.
   * Icon and messages both need access to the same information, which is the API request. 
   * Howwever, the only commmon ancestor is App... so App needs to make the API request.

   * If you PROP-DRILL the API request, as props, you would go through 4 layers to get that information to icon and 3 layers to get to messages.

                          **Icon** (4)
                            |
                          NotificationArea (3)             Messages(3)
                            |                                 |
              LeftSide    RightSide (2)                   FriendList(2)
                  \       /                                   |
                    TopBar (1)                             SideBar(1)     Content
                      |                                      /            /
                      |______________________________________|____________|
                                           |
                                          App

   
# What is context in React?
===========================
  * Context solves a problem called "prop-drilling".
  * Context has a global-like quality, meaning that data can be accessed at many components throughout the application.
  * For example, you could use context for:
      * the currently logged in user's profile information.
      * the current theme for the website.
      * the current language that the website should be displayed in.
      * the permissions the current user has to use website features.

  * Context is best used when the data is required by many components and helps solve the problem of prop-drilling.

  * There are many different solutions to prop-drilling using third-party libraries. For example, you could use: 
      * Redux
      * MobX
      * Rx
      * Flux
      * Relay
      * Apollo





# How do you implement context in a react application?
======================================================
  * For this study, we'll create a small application that changes the language of buttons.
  * For this study, we'll also have deeply nested components to try the implementation of context:

                                        GreatGrandChild
                                        |
                                      GrandChild
                                        |
                      LangControls    Child
                            \          /
                                App
  

  1. Start with the file containing the object fo text displayed for each language.
    * The "labguageSpecificCopy" here has object hard coded selections.
    --------------------------------------------------------------------------------------
        const languageSpecificCopy = {
          'en-GB': {
            title: 'Good Morro Old Chap!',
            body: 'Dolor sit amet consectetur adipisicing elit. Expedita....'
          },
          'en-US': {
            title: 'Howdy Partner!',
            body: 'Dolor sit amet consectetur adipisicing elit. Expedita ....'
          },
          'ko': {
            title: 'Ìè¥Îçî Î™©Î°ù',
            body: 'ÎãπÍ∑ºÏùÄ Î¶¨Î≤†Ïù¥Ìä∏Î•º Í∞ïÌôî. Î•º Í∞ÄÏ°åÏñ¥Ïöî. Ïó¨Í∏∞ÏóêÎèÑÏãúÏóê Ïó¥Î¶ΩÎãàÎã§Ïù¥ ....'
          },
        }

        export default languageSpecificCopy
    --------------------------------------------------------------------------------------

  
  2. Create the Child, GrandChild, and GreatGrandChild components:
  
    GreatGrandChild
    -------------------------------------------------------------------------------------
      import React, { Component } from 'react'
      import languageSpecificCopy from './languageSpecificCopy'

      class GreatGrandChild extends Component {
        render() {
          const copy = languageSpecificCopy['en-US'] || {}                                   // As a safety nest, use "|| {}" to avoid "undefined" if a key does not exist.
          return (
            <section>
              <h2>{copy.title}</h2>
              <p>{copy.body}</p>
            </section>
          )
        }
      }

      export default GreatGrandChild
    -------------------------------------------------------------------------------------

    GrandChild:
    -------------------------------------------------------------------------------------
      import React from 'react'
      import GreatGrandChild from './GreatGrandChild'

      export default function GrandChild() {
        return (
          <div className='GrandChild'>
            <GreatGrandChild />
          </div>
        );
      }
    -------------------------------------------------------------------------------------

    Child:
    -------------------------------------------------------------------------------------
    import React from 'react'
      import GrandChild from './GrandChild'

      export default function Child() {
        return (
          <main role='main' className='Child'>
            <GrandChild />
          </main>
        );
      }
    -------------------------------------------------------------------------------------




3. Create an AppLang component:
    -------------------------------------------------------------------------------------
      import React, { Component } from "react"
      import Child from './Child'

      export default class AppLang extends Component {
        render() {
          return (
            <div className='AppLang'>
              <Child />                                                                      // Child component to connect all the components together.
            </div>
          );
        }
      }
    -------------------------------------------------------------------------------------




4. Create a LangControls component thast contains the buttons for switching between languages:
  ----------------------------------------------------------------------------------------
    import React from 'react'

    export default function LangControls(props) {
      return (
        <>
          <button>
            British{' '}
            <span role='img' aria-label='en-GB'>üá¨üáß</span>
          </button>
          {' '}
          <button>
            American{' '}
            <span role='img' aria-label='en-US'>üá∫üá∏</span>
          </button>
          {' '}
          <button>
            Korean{' '}
            <span role='img' aria-label='ko'>üá∞üá∑</span>
          </button>
        </>
      );
    }
  ----------------------------------------------------------------------------------------
  and of course, import LangControls to the AppLang component:
  -----------------------------------------------------------------------------------------
    import React, { Component } from "react"
    import Child from './Child'
    import LangControls from './LangControls'                                              // imported LangControls

    export default class AppLang extends Component {
      render() {
        return (
          <div className='AppLang'>
            <LangControls />                                                                // LangControls component
            <Child />
          </div>
        );
      }
    }
  -----------------------------------------------------------------------------------------



5. Create the context.
  * So what we want here is for the language to be controlled by the buttons and update the deeply nested
    GreatGrandChild component WITHOUT having to prop-drill.
  * To do this, we need the language to be the data that we can control.

  USE createContext FOR CONTEXT implementation
  -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  * React supplies a function called "createContext", which is what we will use to make our context.
  * You can supply a default value as an argument, so it will be "indow.navigator.language".

  In the study, we'll make a file called "LanguageContext" to set the default argument for the language:
    ---------------------------------------------------------------------------------------
      import React from 'react'

      const LanguageContext = React.createContext({
        lang: window.navigator.language
      })

      export default LanguageContext
    ----------------------------------------------------------------------------------------

    With this, you can refactor the GreatGrandChild componentto use the language from context and also 
    update the LangControls component to disable the button that is currently active.

    So first, you need to import the LanguageContext to the GreatGrandChild component:
    ---------------------------------------------------------------------------------------
      import React, { Component } from 'react'
      import languageSpecificCopy from './languageSpecificCopy'
      import LanguageContext from './LanguageContext'

      class GreatGrandChild extends Component {
        static contextType = LanguageContext;
        render() {
          const copy = languageSpecificCopy['en-US'] || {}
          return (
            <section>
              <h2>{copy.title}</h2>
              <p>{copy.body}</p>
            </section>
          )
        }
      }

      export default GreatGrandChild
    ---------------------------------------------------------------------------------------
