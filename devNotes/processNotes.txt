Process Notes for React Context Study
============================================




About Process Notes
===================
"Process Notes" is a step-by-step workflow document that outlines the "phases" of my study/app development and the successive steps taken at each
milestone of the examination. In the case of studies, the process notes might be eschewed in favor of the main Readme document in the repository, 
mostly because of the advantage in formatting and accessibility. However, I will put additional notes and resource links that might be helpful. In 
the case of application development, groups of related steps are combined into "phase" modules so that they can be reorganized and refined in 
post-review. This has proven to be EXTREMELY helpful in learning (i.e. Feynman technique (https://fs.blog/2012/04/feynman-technique/)) and refining 
workflow so I can improve my process in future projects. It also has come in handy for some tricky bug fixes not only for past projects, but this 
one as well so I would urge you to consider at least doing a rough summary for your own benefit.



Objective of Study
==================





# What is prop-drilling?
========================
  
  BUCKET BRIGADE EXAMPLE
  -==-=-=-=-=-=-=-=-=-=-=-
  * Think of prop-drilling like a bucket brigade, where each firefighter passes water from the hydrant to the fire, where 
    the props are the buckets and the components are the people.
  * So suppose you have a parent component at the root and a component tree. That parent component at the root makes an application
    request and stores it in state. That parent then renders components that render components. This large tree of components all have
    an API response in state in the root component.
  * The inefficient way to get the API request from the root component to the later-later-later-later component would be to: First
    pass the API results (the bucket) from the state to the first (A) direct child component as props. Then, you would need to pass the
    props to B, then to C, then to D, etc.

    [Parent Component] -->  [Child Component A] --> [Child Component B] --> [Child Component C] --> [Child Component D]

  * This passing of the props from the parent to the child at the end (D) is called prop drilling.


   social media icon EXAMPLE
   -=-=-=-=-=-=-=-=-=-=-=-=-
   * In this example, picture a social media website with an icon in the top right corner that says how many unread messages you have and 
     messages widget to read the messages.
   * Icon and messages both need access to the same information, which is the API request. 
   * Howwever, the only commmon ancestor is App... so App needs to make the API request.

   * If you PROP-DRILL the API request, as props, you would go through 4 layers to get that information to icon and 3 layers to get to messages.

                          **Icon** (4)
                            |
                          NotificationArea (3)             Messages(3)
                            |                                 |
              LeftSide    RightSide (2)                   FriendList(2)
                  \       /                                   |
                    TopBar (1)                             SideBar(1)     Content
                      |                                      /            /
                      |______________________________________|____________|
                                           |
                                          App

   
# What is context in React?
===========================
  * Context solves a problem called "prop-drilling".
  * Context has a global-like quality, meaning that data can be accessed at many components throughout the application.
  * For example, you could use context for:
      * the currently logged in user's profile information.
      * the current theme for the website.
      * the current language that the website should be displayed in.
      * the permissions the current user has to use website features.

  * Context is best used when the data is required by many components and helps solve the problem of prop-drilling.

  * There are many different solutions to prop-drilling using third-party libraries. For example, you could use: 
      * Redux
      * MobX
      * Rx
      * Flux
      * Relay
      * Apollo

  
  